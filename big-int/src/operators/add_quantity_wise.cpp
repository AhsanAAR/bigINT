/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person
 * or organization obtaining a copy of the software and
 * accompanying documentation covered by this license
 * (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative
 * works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the following
 * disclaimer, must be included in all copies of the Software, in whole or
 * in part, and all derivative works of the Software, unless such copies
 * or derivative works are solely in the form of machine-executable
 * object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
 * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <istream>
#include <ostream>

#include <bigint.hpp>

namespace libbig{
    largeInt largeInt::addQuantityWise(const largeInt& b) const{
        largeInt result;
        result.number.resize(std::max(number.size(),b.number.size()) + 1);
        int indexA = number.size() - 1, indexB = b.number.size() - 1, indexResult = result.number.size() - 1;
        int sum, carry = 0;
        for(; indexA >= 0 && indexB >= 0; --indexA, --indexB, --indexResult){
            sum = number[indexA] - '0' + b.number[indexB] - '0' + carry;
            carry = sum / 10;
            sum %= 10;
            result.number[indexResult] = '0' + sum;
        }

        if(indexB >= 0){
            for(; indexB >= 0; --indexB, --indexResult){
            sum = b.number[indexB] - '0' + carry;
            carry = sum / 10;
            sum %= 10;
            result.number[indexResult] = '0' + sum;
        }
        }else if(indexA >= 0){
            for(; indexA >= 0; --indexA, --indexResult){
            sum = number[indexA] - '0' + carry;
            carry = sum / 10;
            sum %= 10;
            result.number[indexResult] = '0' + sum;
            }
        }
        result.number[indexResult] = '0' + carry;
        return result;
    }
}